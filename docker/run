#!/bin/bash

usage="
usage: run [{-v|--vdiuser} <VDIUSERNAME>] [{-h|--vdihost} <VDIHOST>] [{-u|--user} <USER>] [{-g|--group} <GROUP>] [{-U|--uid} <UID>] [{-G|--gid} <GID>] [--rebuild] [-c|--cmd <CMD>]"
uservdi=bp892475
hostvdi=lvnvda3087.lvn.broadcom.net
user=$(id -un)
group=$(id -gn)
uid=$(id -u)
gid=$(id -g)

rebuild=false
params=""
while (( "$#" )); do
   case "$1" in
     -c|--cmd)
       cmd=$2
       shift 2
       ;;
     -G|--gid)
       gid=$2
       shift 2
       ;;
     -g|--group)
       group=$2
       shift 2
       ;;
     -n|--name)
       name=$2
       shift 2
       ;;
     --rebuild)
       rebuild=true
       shift 1
       ;;
     -U|--uid)
       uid=$2
       shift 2
       ;;
     -u|--user)
       user=$2
       shift 2
       ;;
     -h|--vdihost)
       hostvdi=$2
       shift 2
       ;;
     -v|--vdiuser)
       uservdi=$2
       shift 2
       ;;
     --) # end argument parsing
       shift
       break
       ;;
     -*|--*=) # unsupported flags
       echo -e $usage
       echo "Error: Unsupported flag $1" >&2
       exit 1
       ;;
     *) # preserve positional arguments
       params="$params $1"
       shift
       ;;
   esac
done

# MacOS Catalina uses a different path for the user homes
mac_os_ver=`sw_vers -productVersion`
case "$mac_os_ver" in
 13.*)
   # Ventura
   volume_root=/System/Volumes/Data/Users
   ;;
 12.5*)
   # Monterrey
   volume_root=/System/Volumes/Data/Users
   ;;
 12.4*)
   # Monterrey
   volume_root=/System/Volumes/Data/Users
   ;;
 11.6*)
   # Big Sur
   volume_root=/System/Volumes/Data/Users
   ;;
 10.15*)
   # MacOS Catalina
   volume_root=/System/Volumes/Data/Users
   ;;
 10.14*)
   # MacOS Mohave
   volume_root=/Users
   ;;
 *) 
   echo "Error: MacOS version $mac_os_ver is not supported. Only Mohave(10.14) and Catalina(10.15) are supported." >&2
   exit 1
   ;;
esac

volume_git=/Volumes/Repos/git
# These variables are used when building image and running container
export uservdi
export user
export volume_root
export volume_git

if $rebuild || ! docker images | grep -e '^docker-bldr\s\+latest' &> /dev/null; then
    # Either the user passed in the --rebuild option or the image doesn't exist, so
    # call the build script to build the image.
    export hostvdi
    export group
    export uid
    export gid
    ./build || exit 1
fi

#
# Run the bldr application from the docker-compose.yml file.  If the --cmd option was specified, then
# that command will be run inside the container. By default, with no --cmd option, an interactive
# shell is opened.
#
args="--rm"
if [ ! -z $name ]; then
    args="$args --name $name"
fi
docker-compose run $args bldr $cmd "$@"
