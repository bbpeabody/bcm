#!/bin/bash

usage="
usage: run [{-v|--vdiuser} <VDIUSERNAME>] [{-u|--user} <USER>] [{-g|--group} <GROUP>] [{-U|--uid} <UID>] [{-G|--gid} <GID>] [{-i|--ipaddr} <HOSTIP>] [--rebuild] [-c|--cmd <CMD>]"
uservdi=bp892475
user=$(id -un)
group=$(id -gn)
uid=$(id -u)
gid=$(id -g)
# Host IP address used for forwarding container's display to host for GUI apps
ipaddr=`ifconfig en0 | grep -e 'inet\s\+\d\+\.\d\+\.\d\+\.\d\+' | cut -f2 -d " "`

rebuild=false
params=""
while (( "$#" )); do
   case "$1" in
     -v|--vdiuser)
       uservdi=$2
       shift 2
       ;;
     -u|--user)
       user=$2
       shift 2
       ;;
     -g|--group)
       group=$2
       shift 2
       ;;
     -U|--uid)
       uid=$2
       shift 2
       ;;
     -G|--gid)
       gid=$2
       shift 2
       ;;
     -i|--ipaddr)
       ipaddr=$2
       shift 2
       ;;
     --rebuild)
       rebuild=true
       shift 1
       ;;
     -c|--cmd)
       cmd=$2
       shift 2
       ;;
     --) # end argument parsing
       shift
       break
       ;;
     -*|--*=) # unsupported flags
       echo -e $usage
       echo "Error: Unsupported flag $1" >&2
       exit 1
       ;;
     *) # preserve positional arguments
       params="$params $1"
       shift
       ;;
   esac
done

#eval set -- "$params"

# These variables are used when building image and running container
export uservdi
export ipaddr
export user

if ! docker images | grep -e '^docker_bldr\s\+latest' &> /dev/null; then
    # Docker image doesn't exist.  Need to rebuild.
    rebuild=true
fi

if $rebuild; then
    
    # Copy files needed to build container from home directory
    files_to_copy=( ~/.vimrc ~/.bashrc ~/.gitconfig ~/.gitignore ~/.coverity_auth_key )
    for file in ${files_to_copy[@]}; do
        if [ -e $file ] && [ ! -e "./$(basename $file)" ]; then
            cp $file .
        fi
    done

    # ARM Developer's Studio installation file.  This file needs to exist in this directory when the container
    # is built.  Available here:
    # https://developer.arm.com/tools-and-software/embedded/arm-development-studio/downloads
    # Development Studio 2019.1 Released November 1, 2019
    armds_tgz="DS000-BN-00001-r19p1-00rel1.tgz"
    armds_ver="2019.1"                      
    armds_dir=${armds_tgz%.*}
    armds_installer="armds-$armds_ver.sh"
    armds_installdir="/home/$user/developmentstudio-$armds_ver"

    if [ ! -f $armds_tgz ]; then
        echo "ERROR: Build of container will fail. Dockerfile expects $armds_tgz to be present in current directory."
        exit 1
    fi

    # These variables are only used when building image
    export group
    export uid
    export gid
    export armds_tgz
    export armds_dir
    export armds_installer
    export armds_installdir

    docker-compose build bldr
fi

# Check if socat is running and connected to port 6000
if ! ps -e | grep -v grep | grep 'socat TCP-LISTEN:6000' &> /dev/null; then
    # socat is not running.  Needed for GUI applications in container
    # Try to start it
    # Check if it's installed
    if ! socat -V &> /dev/null; then
        echo 'Warning: socat is not installed.  This package is necessary to run GUI applications from container. Install with "brew install socat"'
    else
        # socat is installed, setup bi-directional stream
        echo Killing all Xquartz
        killall Xquartz &> /dev/null
        echo Starting socat...
        socat TCP-LISTEN:6000,reuseaddr,fork UNIX-CLIENT:\"$DISPLAY\" &
    fi
fi

# Check if Xquartz is running
if ! ps -e | grep -v grep | grep Xquartz &> /dev/null; then
    # Xquartz is not running.  Needed for GUI applications in container
    # Try to start it
    echo Starting Xquartz...
    if ! open -a XQuartz; then
        echo 'Warning: Could not start XQuartz. This package is necessary to run GUI applications from container. Install with "brew cask install xquartz"'
    fi
fi

docker-compose run --rm bldr $cmd "$@"
