# -*- mode: ruby -*-
# vi: set ft=ruby :

#
# This will provision a guest virtual machine suitable for building the Thor firmware.
# See README.md for detailed instructions.
#

# Set these to your username and VDI URL
USER = "bp892475"
VDI = "lvnvda3087.lvn.broadcom.net"

# All Vagrant configuration is done below. The "2" in Vagrant.configure
# configures the configuration version (we support older styles for
# backwards compatibility). Please don't change it unless you know what
# you're doing.
Vagrant.configure("2") do |config|
  # Create a centos 7 machine named "bldr"
  config.vm.hostname = "bldr"
  config.vm.box = "centos/7"
  config.vm.box_check_update = false
  config.vm.define "bldr"

  # Use VirtualBox as the provider(hypervisor).  Allocate 8 CPU cores and 8G RAM.
  config.vm.provider "virtualbox" do |vb|
    vb.name = "bldr"
    vb.cpus = 8
    vb.memory = 8192

    # Use virtio for best performance. If vagrant up hangs, comment this line.
    vb.default_nic_type = "virtio"
    vb.customize ["modifyvm", :id, "--natdnshostresolver1", "on"]
    vb.customize ["modifyvm", :id, "--natdnsproxy1", "on"]
  end
  
  # vagrant-vbguest plugin automatically install the host's VirtualBox Guest Additions 
  # on the guest system.  Installation - vagrant plugin install vagrant-vbguest
  if Vagrant.has_plugin?("vagrant-vbguest")
    config.vbguest.auto_update = true
  end

  # Configure static IP on private host NAT network.  This can be whatever you want as long
  # as it's a non-routable IP - i.e. 192.168.0.0/16.  This IP will only be visible to the 
  # host. VirtualBox provides a private NAT network.
  config.vm.network "private_network", ip: "192.168.33.10"
  config.ssh.forward_agent = true

  # This will configure the nfsd server on the host and mount the nfs share on the guest
  # Do not use UDP transport. Make hangs whe you try to use UDP.
  config.vm.synced_folder "~/git", "/git", type: "nfs", mount_options: ['rw', 'nosuid', 'proto=tcp', 'resvport', 'nolock', 'async', 'noatime']
  
  # Set the guest time to match the host.
  config.vm.provision "shell", inline: "sudo rm /etc/localtime && sudo ln -s /usr/share/zoneinfo/America/New_York /etc/localtime", run: "always"

  # All provisioning below is only run once.  It may be run again using --provision option
  # Copy some config files to the guest
  # ZSH shell/environment configuration
  config.vm.provision "file", source: "zshrc", destination: ".zshrc"
  config.vm.provision "file", source: "zshenv", destination: ".zshenv"
  # VIM editor configuration
  config.vm.provision "file", source: "vimrc", destination: ".vimrc"
  # Powerlevel10k ZSH plugin configuration
  config.vm.provision "file", source: "p10k.zsh", destination: ".p10k.zsh"
  # Local git configuration.  At a minimum needs your name and email configured
  config.vm.provision "file", source: "~/.gitconfig", destination: ".gitconfig"

  # Copy ssh key to VM
  config.vm.provision "file", source: "~/.ssh/id_rsa", destination: ".ssh/id_rsa"
  
  # Run the bootstrap script.  This only runs once after the first call to vagrant up
  # after a vagrant destroy.  It can be run again using --provision option.
  config.vm.provision "shell", path: "bootstrap.sh", env: { "USER" => USER, "VDI" => VDI }
end
